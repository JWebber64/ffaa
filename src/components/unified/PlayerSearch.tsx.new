import React, { useEffect, useMemo, useRef, useState } from 'react';
import {
  Box,
  Button,
  Input,
  InputGroup,
  InputLeftElement,
  List,
  ListItem,
  Text,
  Badge,
  useDisclosure,
  HStack,
  VStack,
  Spinner,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
} from '@chakra-ui/react';
import { FaSearch } from 'react-icons/fa';
import { useDraftStore } from '../../store/draftStore';
import type { Player } from '../../store/draftStore';

type PlayerSearchProps = {
  players?: Player[];
  onSelect?: (player: Player) => void;
  selectedPlayer?: Player | null;
  startingBid?: string;
  onSetStartingBid?: (bid: string) => void;
  onBid?: (player: Player, amount: number) => void;
  filterUndrafted?: boolean;
  maxResults?: number;
  debounceMs?: number;
  placeholder?: string;
  showBidButton?: boolean;
  showStartingBid?: boolean;
};

const POSITION_COLORS: Record<string, string> = {
  QB: 'blue',
  RB: 'green',
  WR: 'purple',
  TE: 'orange',
  K: 'yellow',
  DEF: 'gray',
};

export const PlayerSearch: React.FC<PlayerSearchProps> = ({
  players: externalPlayers,
  onSelect,
  selectedPlayer = null,
  startingBid = '1',
  onSetStartingBid,
  filterUndrafted = true,
  maxResults = 8,
  debounceMs = 150,
  onBid,
  placeholder = 'Search playersâ€¦ (name, team, position)',
  showBidButton = false,
  showStartingBid = false,
}) => {
  // State
  const [query, setQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [focusedIndex, setFocusedIndex] = useState(-1);
  const [bidAmount, setBidAmount] = useState(1);
  const [showResults, setShowResults] = useState(false);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const inputRef = useRef<HTMLInputElement>(null);
  const resultsRef = useRef<HTMLDivElement>(null);
  const [selectedPlayerState, setSelectedPlayerState] = useState<Player | null>(selectedPlayer);

  // Get players from store if not provided via props
  const storePlayers = useDraftStore(s => s.players);
  const players = externalPlayers || storePlayers;

  // Debounce search with loading state
  useEffect(() => {
    if (query.trim()) {
      setIsSearching(true);
      const timer = setTimeout(() => {
        setIsSearching(false);
      }, debounceMs);
      return () => clearTimeout(timer);
    }
    setIsSearching(false);
    return undefined;
  }, [query, debounceMs]);

  // Filter players based on query and other criteria
  const filteredPlayers = useMemo(() => {
    const searchTerm = query.trim().toLowerCase();
    if (!searchTerm) return [];
    
    let result = [...players];

    if (filterUndrafted) {
      result = result.filter(p => !p.draftedBy);
    }

    result = result.filter(p => {
      const name = p.name?.toLowerCase() || '';
      const team = p.nflTeam?.toLowerCase() || '';
      const pos = p.pos?.toLowerCase() || '';
      return name.includes(searchTerm) || team.includes(searchTerm) || pos.includes(searchTerm);
    });

    return result.slice(0, maxResults);
  }, [query, players, filterUndrafted, maxResults]);
  
  // Show results when query changes
  useEffect(() => {
    setShowResults(query.trim().length > 0);
  }, [query]);

  // Handle keyboard navigation
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (filteredPlayers.length === 0) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setFocusedIndex(prev => (prev < filteredPlayers.length - 1 ? prev + 1 : prev));
        break;
      case 'ArrowUp':
        e.preventDefault();
        setFocusedIndex(prev => (prev > 0 ? prev - 1 : 0));
        break;
      case 'Enter':
        e.preventDefault();
        if (focusedIndex >= 0 && focusedIndex < filteredPlayers.length) {
          handleSelect(filteredPlayers[focusedIndex]);
        }
        break;
      case 'Escape':
        setQuery('');
        setFocusedIndex(-1);
        break;
    }
  };

  // Handle player selection
  const handleSelect = (player: Player | undefined) => {
    if (!player) return;
    
    if (showBidButton) {
      setSelectedPlayerState(player);
      onOpen();
    } else if (onSelect) {
      onSelect(player);
      setQuery(player.name || '');
      setFocusedIndex(-1);
      setShowResults(false);
    }
  };

  // Handle clicks outside to close results
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (resultsRef.current && !resultsRef.current.contains(event.target as Node) && 
          inputRef.current !== event.target) {
        setShowResults(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Handle bid placement
  const handlePlaceBid = () => {
    if (selectedPlayerState && onBid) {
      onBid(selectedPlayerState, bidAmount);
      onClose();
    }
  };

  // Handle starting bid change
  const handleStartingBidChange = (value: string) => {
    if (onSetStartingBid) {
      onSetStartingBid(value);
    }
  };

  return (
    <Box position="relative" width="100%" maxW="400px">
      <InputGroup>
        <InputLeftElement pointerEvents="none">
          <FaSearch color="gray.300" />
        </InputLeftElement>
        <Input
          ref={inputRef}
          placeholder={placeholder}
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          onKeyDown={handleKeyDown}
          onFocus={() => setShowResults(true)}
          bg="white"
          color="gray.800"
          autoComplete="off"
          aria-autocomplete="list"
          aria-controls="player-search-results"
        />
      </InputGroup>

      {showStartingBid && onSetStartingBid && (
        <HStack mt={2}>
          <Text fontSize="sm">Starting Bid:</Text>
          <NumberInput
            size="sm"
            min={1}
            max={1000}
            value={startingBid}
            onChange={handleStartingBidChange}
            w="100px"
          >
            <NumberInputField />
            <NumberInputStepper>
              <NumberIncrementStepper />
              <NumberDecrementStepper />
            </NumberInputStepper>
          </NumberInput>
        </HStack>
      )}

      {showResults && (isSearching) && (
        <Box position="absolute" width="100%" mt={1} bg="white" borderRadius="md" boxShadow="md" zIndex={10}>
          <Box p={3} textAlign="center">
            <Spinner size="sm" mr={2} />
            <Text>Searching players...</Text>
          </Box>
        </Box>
      )}
      
      {showResults && !isSearching && filteredPlayers.length > 0 && (
        <Box 
          ref={resultsRef}
          position="absolute" 
          width="100%" 
          mt={1} 
          bg="white" 
          borderRadius="md" 
          boxShadow="md" 
          zIndex={10}
          maxH="300px"
          overflowY="auto"
          id="player-search-results"
          role="listbox"
        >
          <List spacing={0}>
            {filteredPlayers.map((player, index) => (
              <ListItem
                key={player.id}
                p={2}
                bg={focusedIndex === index ? 'blue.50' : 'transparent'}
                _hover={{ bg: 'blue.50', cursor: 'pointer' }}
                onClick={() => handleSelect(player)}
                onMouseEnter={() => setFocusedIndex(index)}
                borderBottom="1px"
                borderColor="gray.100"
                role="option"
                aria-selected={focusedIndex === index}
              >
                <HStack justify="space-between">
                  <Box>
                    <Text fontWeight="medium">{player.name}</Text>
                    <HStack spacing={2} mt={1}>
                      <Badge colorScheme={POSITION_COLORS[player.pos] || 'gray'}>{player.pos}</Badge>
                      {player.nflTeam && <Badge variant="outline">{player.nflTeam}</Badge>}
                      {player.rank && <Text fontSize="sm" color="gray.500">#{player.rank}</Text>}
                    </HStack>
                  </Box>
                  {showBidButton && (
                    <Button 
                      size="sm" 
                      colorScheme="blue"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSelect(player);
                      }}
                    >
                      Bid
                    </Button>
                  )}
                </HStack>
              </ListItem>
            ))}
          </List>
        </Box>
      )}
      
      {showResults && !isSearching && query && filteredPlayers.length === 0 && (
        <Box 
          position="absolute" 
          width="100%" 
          mt={1} 
          bg="white" 
          borderRadius="md" 
          boxShadow="md" 
          p={3}
          zIndex={10}
        >
          <Text>No players found. Try a different search term.</Text>
        </Box>
      )}
    </Box>
  );
};

export default PlayerSearch;
